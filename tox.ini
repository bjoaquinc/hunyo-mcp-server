[tox]
min_version = 4.0
env_list = 
    py310,py311,py312,py313
    coverage-report
skip_missing_interpreters = true

[testenv]
# Use hatch to manage dependencies and virtual environments
package = editable
wheel_build_env = .pkg
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-timeout>=2.1.0
    pytest-cov>=4.0.0
    marimo>=0.8.0
    # Version-specific overrides
    py{310,311,312,313}: pytest>=8.3.0
setenv =
    PYTHONPATH = {toxinidir}/src:{env:PYTHONPATH:}
commands = 
    # Run full test suite with coverage for this Python version
    pytest --cov=src/hunyo_mcp_server --cov=src/capture \
           --cov-report= \
           --timeout=30 -v {posargs:test}

[testenv:coverage-report]
# Generate final coverage report after all versions tested
deps = coverage[toml]>=6.0
skip_install = true
allowlist_externals = bash, ls, find
commands = 
    # Debug what coverage files we have
    bash -c "echo 'Coverage files in directory:'; ls -la .coverage* 2>/dev/null || echo 'No .coverage files found'"
    bash -c "echo 'Source files that should be covered:'; find src/ -name '*.py' | head -5"
    
    # Smart coverage handling: combine if multiple files, use single if available, or fallback
    bash -c "
    if ls .coverage.* 1>/dev/null 2>&1; then
        echo 'Found parallel coverage files, combining...'
        coverage combine
        echo 'Coverage data combined successfully'
    elif [ -f .coverage ]; then
        echo 'Using existing single coverage file...'
    else
        echo 'WARNING: No coverage data found. This environment expects coverage data from test runs.'
        echo 'To generate coverage locally, run: tox -e py311 && tox -e coverage-report'
        exit 1
    fi
    "
    
    # Verify coverage data exists before generating reports
    bash -c "
    if [ ! -f .coverage ]; then
        echo 'ERROR: No .coverage file found after processing.'
        echo 'Run tests with coverage first: hatch run test-cov or tox -e py311'
        exit 1
    fi
    "
    
    # Debug coverage data before generating reports
    bash -c "echo 'Coverage debug info:'; coverage debug data 2>/dev/null || echo 'Coverage debug failed (may be normal)'"
    
    # Generate reports
    coverage report --show-missing --fail-under=70
    coverage html
    coverage xml



[testenv:py313-latest] 
# Test with latest Python and bleeding edge dependencies
deps = 
    pytest
    pytest-asyncio
    pytest-timeout
    pytest-cov
    marimo
commands = 
    pytest test/ -v --timeout=30

[testenv:compatibility-check]
# Special environment to check version compatibility
deps =
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-timeout>=2.1.0
setenv =
    PYTHONPATH = {toxinidir}/src:{env:PYTHONPATH:}
allowlist_externals = python
commands = 
    python -c "import sys; print(f'Python {sys.version}'); assert sys.version_info >= (3, 10)"
    python -c "import pandas, duckdb, pydantic, click, watchdog, websockets; print('âœ… All major dependencies imported successfully')"
    pytest test/test_python_version_compatibility.py -v

[testenv:style]
# Code quality and style checks
deps = 
    black>=23.0.0
    ruff>=0.1.0
    mypy>=1.0.0
    types-click
commands = 
    black --check --diff src/ test/
    ruff check src/ test/
    mypy src/hunyo_mcp_server src/capture

[testenv:docs]
# Documentation testing (placeholder for future)
deps = 
    sphinx
    sphinx-rtd-theme
commands = 
    python -c "print('ðŸ“š Documentation testing placeholder')"

# Configuration for coverage
[coverage:run]
source = src/
branch = true
parallel = true
relative_files = true
omit = 
    */tests/*
    */test/*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:paths]
# Map different absolute paths to the same relative path
source = 
    src/
    */src/
    ./**/src/
    */hunyo-mcp-server/src/
    */hunyo-notebook-memories-mcp/src/
    /Users/*/hunyo-notebook-memories-mcp/src/
    /home/runner/work/hunyo-mcp-server/hunyo-mcp-server/src/
    /home/*/hunyo-*/src/

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if __name__ == .__main__.:
    if TYPE_CHECKING:
show_missing = true
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml 