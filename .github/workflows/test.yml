name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  test-mcp-server:
    name: "Test MCP Server - Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install hatch
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch
      - name: Test MCP Server
        run: |
          cd packages/hunyo-mcp-server
          hatch env create test
          hatch run test:pytest tests/ -v
          
  test-capture:
    name: "Test Capture - Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install hatch
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch
      - name: Test Capture
        run: |
          cd packages/hunyo-capture  
          hatch env create test
          hatch run test:pytest tests/ -v
          
  test-integration:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: [test-mcp-server, test-capture]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install hatch
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch
      - name: Test Cross-Package Integration
        run: |
          # Run from repo root for integration tests
          hatch env create test
          hatch run test:pytest tests/integration/ -v

  # Code quality checks
  code-quality:
    name: "Code Quality"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        
    - name: Run code quality checks
      run: |
        hatch run style
        hatch run typing

  # Test package building (installation tested in environment isolation job)
  test-package:
    name: "Test Package Building"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Build packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        
        # Build both packages
        cd packages/hunyo-mcp-server
        hatch build
        cd ../hunyo-capture
        hatch build
        
        # Validate build artifacts exist
        ls -la packages/hunyo-mcp-server/dist/
        ls -la packages/hunyo-capture/dist/

  # Test environment isolation (validates package separation architecture)
  test-environment-isolation:
    name: "Environment Isolation (pipx + venv)"
    runs-on: ubuntu-latest
    needs: [test-package]
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[test-isolation]')
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install pipx
      run: python -m pip install pipx
    
    - name: Install MCP server via pipx
      run: |
        cd packages/hunyo-mcp-server
        pipx install .
        
    - name: Install capture in different environment
      run: |
        python -m venv notebook_env
        cd packages/hunyo-capture
        ../../notebook_env/bin/pip install .
        
    - name: Test isolation works
      run: |
        # Create test notebook file
        echo "import marimo as mo" > test_notebook.py
        
        # Test MCP server works without capture
        hunyo-mcp-server --notebook test_notebook.py --standalone --verbose > mcp_test.log 2>&1 &
        SERVER_PID=$!
        sleep 5
        kill $SERVER_PID 2>/dev/null || true
        
        # Test capture works in notebook environment
        notebook_env/bin/python -c "from hunyo_capture.unified_marimo_interceptor import enable_unified_tracking; print('✅ Capture package works in isolation')"
        
    - name: Test graceful fallback messages
      run: |
        # Test that MCP server provides helpful instructions when capture not available
        hunyo-mcp-server --notebook test_notebook.py --standalone --verbose > output.log 2>&1 &
        SERVER_PID=$!
        sleep 5
        kill $SERVER_PID 2>/dev/null || true
        
        # Check that graceful fallback messages are present
        if grep -q "To enable notebook tracking" output.log; then
          echo "✅ Graceful fallback messages working"
        else
          echo "❌ Graceful fallback messages not found"
          echo "Server output:"
          cat output.log
          exit 1
        fi
        
    - name: Test cross-environment integration
      run: |
        # Test that capture package can be imported from notebook environment
        notebook_env/bin/python -c "
        from hunyo_capture.unified_marimo_interceptor import enable_unified_tracking
        from hunyo_capture.logger import get_logger
        logger = get_logger('test')
        logger.info('[TEST] Cross-environment integration test passed')
        print('✅ Cross-environment integration successful')
        "
        
    - name: Cleanup
      run: |
        rm -f test_notebook.py output.log mcp_test.log
        rm -rf notebook_env
        pipx uninstall hunyo-mcp-server || true

  # Test summary
  test-summary:
    name: "Test Summary"
    runs-on: ubuntu-latest
    needs: [test-mcp-server, test-capture, test-integration, code-quality, test-package, test-environment-isolation]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Summary:"
        echo "  MCP Server Tests: ${{ needs.test-mcp-server.result }}"
        echo "  Capture Tests: ${{ needs.test-capture.result }}"
        echo "  Integration Tests: ${{ needs.test-integration.result }}"
        echo "  Code Quality: ${{ needs.code-quality.result }}"
        echo "  Package Build: ${{ needs.test-package.result }}"
        echo "  Environment Isolation: ${{ needs.test-environment-isolation.result }}"
        
        # Fail if critical tests failed
        if [[ "${{ needs.test-mcp-server.result }}" != "success" ]] || 
           [[ "${{ needs.test-capture.result }}" != "success" ]] ||
           [[ "${{ needs.test-integration.result }}" != "success" ]] ||
           [[ "${{ needs.code-quality.result }}" != "success" ]] ||
           [[ "${{ needs.test-package.result }}" != "success" ]] ||
           [[ "${{ needs.test-environment-isolation.result }}" == "failure" ]]; then
          echo "[FAIL] Critical tests failed"
          exit 1
        else
          echo "[OK] All critical tests passed!"
        fi 