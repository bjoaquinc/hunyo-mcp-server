name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  # Quick compatibility check first
  compatibility-check:
    name: "Python Version Compatibility Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
        
    - name: Run compatibility check
      run: tox -e compatibility-check

  # Test matrix across all Python versions
  test-matrix:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: compatibility-check
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # Base matrix: all Python versions on Ubuntu
          - python-version: "3.10"
            os: ubuntu-latest
          - python-version: "3.11"
            os: ubuntu-latest
          - python-version: "3.12"
            os: ubuntu-latest
          - python-version: "3.13"
            os: ubuntu-latest
          # Additional OS testing for stable versions
          - python-version: "3.11"
            os: windows-latest
          - python-version: "3.11" 
            os: macos-latest
          - python-version: "3.12"
            os: windows-latest
          - python-version: "3.12"
            os: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true  # Allow Python 3.13 prereleases
        
    - name: Get pip cache dir
      id: pip-cache
      run: echo "dir=$(python -m pip cache dir)" >> "$GITHUB_OUTPUT"
      shell: bash
      
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'tox.ini') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch tox
        
    - name: Debug environment
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "Python path: $(which python)"
        echo "Pip version: $(python -m pip --version)"
        echo "Tox version: $(tox --version)"
        echo "Platform: ${{ runner.os }}"
        echo "Matrix Python version: ${{ matrix.python-version }}"
        
    - name: Install package in development mode
      run: |
        hatch env create
        hatch run python -m pip install -e .
        
    - name: Run tests with coverage
      shell: bash
      working-directory: ${{ github.workspace }}
      env:
        PYTHONPATH: ./src
      run: |
        # Debug paths and environment
        echo "Working directory: $(pwd)"
        echo "Source directory structure:"
        find src/ -name "*.py" | head -10 || echo "No Python files found"
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Convert Python version to tox environment name (e.g., 3.11 -> py311)
        PY_VERSION=$(echo "${{ matrix.python-version }}" | tr -d '.')
        echo "Running tox environment: py${PY_VERSION}"
        tox -e py${PY_VERSION}
        
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data-py${{ matrix.python-version }}-${{ runner.os }}
        path: ".coverage.*"
        if-no-files-found: ignore

  # Code quality checks
  code-quality:
    name: "Code Quality (Python 3.11)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        
    - name: Run code quality checks
      run: |
        hatch run style
        hatch run typing

  # Integration testing on latest stable Python
  integration-tests:
    name: "Integration Tests (Python 3.12)"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        
    - name: Run integration tests
      working-directory: ${{ github.workspace }}
      env:
        PYTHONPATH: ./src
      run: |
        hatch run test test/integration/ -v --timeout=60

  # Generate final coverage report
  coverage-report:
    name: "Coverage Report"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-matrix
    if: always()  # Run even if some tests failed
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox coverage[toml]
        
    - name: Download all coverage data
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-data-*
        merge-multiple: true
        
    - name: Generate coverage report
      run: |
        # Debug coverage data
        echo "Coverage files found:"
        ls -la .coverage* || echo "No .coverage files found"
        echo "Working directory: $(pwd)"
        echo "Source structure:"
        find . -name "*.py" -path "./src/*" | head -5
        
        # Generate report
        tox -e coverage-report
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Test installation from built package
  test-package:
    name: "Test Package Installation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Build package
      run: |
        python -m pip install --upgrade pip
        pip install build hatch
        hatch build
        
    - name: Test package installation
      working-directory: ${{ github.workspace }}
      env:
        PYTHONPATH: ./src
      run: |
        pip install dist/*.whl
        python -c "import hunyo_mcp_server; print('✅ Package installed successfully')"
        python -c "from capture.live_lineage_interceptor import MarimoLiveInterceptor; print('✅ Capture layer importable')"

  # Performance regression testing
  performance-check:
    name: "Performance Check"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test-matrix
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch pytest-benchmark
        
    - name: Run performance tests
      working-directory: ${{ github.workspace }}
      env:
        PYTHONPATH: ./src
      run: |
        hatch run python -c "
        import time
        from capture.live_lineage_interceptor import MarimoLiveInterceptor
        
        # Simple performance check
        start = time.time()
        interceptor = MarimoLiveInterceptor('/tmp')
        setup_time = time.time() - start
        
        print(f'📊 Interceptor setup time: {setup_time:.3f}s')
        assert setup_time < 1.0, f'Setup too slow: {setup_time:.3f}s'
        print('✅ Performance check passed')
        "

# Workflow summary
  test-summary:
    name: "Test Summary"
    runs-on: ubuntu-latest
    needs: [compatibility-check, test-matrix, code-quality, integration-tests, coverage-report, test-package]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "🧪 Test Summary:"
        echo "  ✅ Compatibility Check: ${{ needs.compatibility-check.result }}"
        echo "  📊 Test Matrix: ${{ needs.test-matrix.result }}"
        echo "  🎨 Code Quality: ${{ needs.code-quality.result }}"
        echo "  🔗 Integration Tests: ${{ needs.integration-tests.result }}"
        echo "  📈 Coverage Report: ${{ needs.coverage-report.result }}"
        echo "  📦 Package Test: ${{ needs.test-package.result }}"
        
        # Fail if critical tests failed
        if [[ "${{ needs.compatibility-check.result }}" != "success" ]] || 
           [[ "${{ needs.test-matrix.result }}" != "success" ]] ||
           [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        else
          echo "🎉 All critical tests passed!"
        fi 