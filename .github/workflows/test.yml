name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  # Test matrix across all Python versions - simplified hatch-only approach
  test-matrix:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # Base matrix: all Python versions on Ubuntu
          - python-version: "3.10"
            os: ubuntu-latest
          - python-version: "3.11"
            os: ubuntu-latest
          - python-version: "3.12"
            os: ubuntu-latest
          - python-version: "3.13"
            os: ubuntu-latest
          # Additional OS testing for stable versions  
          - python-version: "3.11"
            os: windows-latest
          - python-version: "3.11" 
            os: macos-latest
          - python-version: "3.12"
            os: windows-latest
          - python-version: "3.12"
            os: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true  # Allow Python 3.13 prereleases
        
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        
    - name: Debug environment
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "Python path: $(which python)"
        echo "Pip version: $(python -m pip --version)"
        echo "Hatch version: $(hatch --version)"
        echo "Platform: ${{ runner.os }}"
        echo "Matrix Python version: ${{ matrix.python-version }}"
        
    - name: Create hatch environment
      run: |
        echo "Creating hatch environment with test dependencies..."
        hatch env create test
        
    - name: Verify dependencies
      run: |
        echo "🔍 Verifying critical dependencies..."
        hatch run test:python -c "import pandas; print('✅ pandas available')"
        hatch run test:python -c "import duckdb; print('✅ duckdb available')" 
        hatch run test:python -c "import jsonschema; print('✅ jsonschema available')"
        hatch run test:python -c "import pytest; print('✅ pytest available')"
        hatch run test:python -c "import click; print('✅ click available')"
        echo "✅ All dependencies verified"
        
    - name: Run tests with coverage
      shell: bash
      run: |
        echo "Running tests with coverage on Python ${{ matrix.python-version }}"
        hatch run test:test-cov
        
        # Rename coverage file to include job info for later combination
        if [ -f .coverage ]; then
          mv .coverage .coverage.py${{ matrix.python-version }}-${{ runner.os }}
          echo "✅ Coverage file renamed to: .coverage.py${{ matrix.python-version }}-${{ runner.os }}"
        fi
        
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data-py${{ matrix.python-version }}-${{ runner.os }}
        path: ".coverage.*"
        if-no-files-found: warn

  # Code quality checks
  code-quality:
    name: "Code Quality"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        
    - name: Run code quality checks
      run: |
        hatch run style
        hatch run typing

  # Integration testing on latest stable Python
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        
    - name: Create environment and verify setup
      run: |
        hatch env create test
        hatch run test:python -c "import marimo; print('✅ marimo available')"
        
    - name: Run integration tests
      run: |
        hatch run test:test test/integration/ -v --timeout=60

  # Generate final coverage report
  coverage-report:
    name: "Coverage Report"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-matrix
    if: always()  # Run even if some tests failed
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch coverage[toml]
        
    - name: Download all coverage data
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-data-*
        merge-multiple: true
        
    - name: Generate coverage report
      run: |
        echo "📊 Processing coverage data..."
        ls -la .coverage* 2>/dev/null || echo "No coverage files found"
        
        if ls .coverage.* 1>/dev/null 2>&1; then
          echo "Combining coverage files..."
          coverage combine
          coverage report --show-missing
          coverage html
          coverage xml
          echo "✅ Coverage reports generated"
        else
          echo "No coverage data found, running fallback collection..."
          hatch env create test
          hatch run test:test-cov -k "not slow"
        fi
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Test package installation  
  test-package:
    name: "Test Package Installation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Build and test package
      run: |
        python -m pip install --upgrade pip
        python -m pip install hatch
        hatch build
        pip install dist/*.whl
        python -c "import hunyo_mcp_server; print('✅ Package installed successfully')"
        python -c "from capture.live_lineage_interceptor import MarimoLiveInterceptor; print('✅ Capture layer importable')"

  # Test summary
  test-summary:
    name: "Test Summary"
    runs-on: ubuntu-latest
    needs: [test-matrix, code-quality, integration-tests, coverage-report, test-package]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "🧪 Test Summary:"
        echo "  📊 Test Matrix: ${{ needs.test-matrix.result }}"
        echo "  🎨 Code Quality: ${{ needs.code-quality.result }}"
        echo "  🔗 Integration Tests: ${{ needs.integration-tests.result }}"
        echo "  📈 Coverage Report: ${{ needs.coverage-report.result }}"
        echo "  📦 Package Test: ${{ needs.test-package.result }}"
        
        # Fail if critical tests failed
        if [[ "${{ needs.test-matrix.result }}" != "success" ]] || 
           [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        else
          echo "🎉 All critical tests passed!"
        fi 