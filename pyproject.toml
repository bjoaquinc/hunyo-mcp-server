[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hunyo-mcp-server"
dynamic = ["version"]
description = "Zero-configuration DataFrame tracking and runtime debugging for Marimo notebooks via MCP"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Hunyo Team", email = "team@hunyo.dev" },
]
keywords = [
    "marimo",
    "dataframe",
    "tracking",
    "mcp",
    "openlineage",
    "debugging",
    "notebook",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "mcp>=1.0.0",
    "click>=8.0.0",
    "duckdb>=0.9.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "watchdog>=3.0.0",
    "websockets>=11.0.0",
    "openlineage-python>=0.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-click",
    "marimo>=0.8.0",
    "tox>=4.0.0",
    "jsonschema>=4.0.0",
]

[project.urls]
Documentation = "https://github.com/hunyo-dev/hunyo-notebook-memories-mcp#readme"
Issues = "https://github.com/hunyo-dev/hunyo-notebook-memories-mcp/issues"
Source = "https://github.com/hunyo-dev/hunyo-notebook-memories-mcp"

[project.scripts]
hunyo-mcp-server = "hunyo_mcp_server.server:main"

[tool.hatch.version]
path = "src/hunyo_mcp_server/__init__.py"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "black",
    "ruff",
    "mypy",
    "types-click",
    "marimo>=0.8.0",
    "jsonschema>=4.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:test}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/hunyo_mcp_server --cov=src/capture {args:test}"
typing = "mypy --install-types --non-interactive {args:src/hunyo_mcp_server src/capture test}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
# Multi-version testing scripts
test-all = "tox"
test-py310 = "tox -e py310" 
test-py311 = "tox -e py311"
test-py312 = "tox -e py312"
test-py313 = "tox -e py313"
compatibility-check = "tox -e compatibility-check"
test-matrix = "hatch run test:test"
coverage-report = "tox -e coverage-report"

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-timeout>=2.1.0",
    "pytest-cov>=4.0.0",
    "marimo>=0.8.0",
    "jsonschema>=4.0.0",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/hunyo_mcp_server --cov=src/capture {args}"

# Multi-version testing environments
[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.test.overrides]
matrix.python.dependencies = [
    { value = "pytest>=8.3.0", if = ["3.10", "3.11", "3.12", "3.13"] },
]

# Pytest configuration following marimo patterns
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q -v --strict-markers --strict-config"
testpaths = ["test"]
asyncio_mode = "auto"
timeout = 30  # seconds, per test
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source_pkgs = ["hunyo_mcp_server", "capture"]
branch = true
parallel = true
omit = [
    "src/hunyo_mcp_server/__about__.py",
]

[tool.coverage.paths]
hunyo_mcp_server = ["src/hunyo_mcp_server", "*/hunyo-mcp-server/src/hunyo_mcp_server"]
capture = ["src/capture", "*/hunyo-mcp-server/src/capture"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
target-version = ["py310", "py311", "py312", "py313"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 88
lint.select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow imports not at top-level (useful for conditional imports, lazy loading)
    "E402", "PLC0415",
    # Allow longer lines (usefule for logs and test asserts)
    "E501",
]
lint.unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["hunyo_mcp_server", "capture"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"test/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true 