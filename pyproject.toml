# pyproject.toml (at repo root - for development and integration testing)
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hunyo-workspace"
dynamic = ["version"]
description = "Development workspace for hunyo packages"
readme = "README.md"
authors = [{name = "Your Name", email = "your.email@example.com"}]
license = {text = "MIT"}
requires-python = ">=3.10"

# Development dependencies for workspace
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",  # For async test functions
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[tool.hatch.version]
path = "packages/hunyo-mcp-server/src/hunyo_mcp_server/__init__.py"  # Use MCP server version as workspace version

# Workspace configuration - install packages locally  
[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",  # For async test functions
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",  # For async test functions
    "pytest-cov>=4.0.0", 
    "pytest-timeout>=2.1.0",
    "marimo>=0.8.0",
]

# Integration testing from repo root - configuration in main pytest section below

[project.urls]
Repository = "https://github.com/your-username/hunyo-notebook-memories-mcp"

[project.scripts]

[tool.hatch.build.targets.wheel]
# Don't build wheel for workspace - only for development
exclude = ["*"]

[tool.hatch.envs.default.scripts]
install-packages = [
    "pip install -e ./packages/hunyo-mcp-server",
    "pip install -e ./packages/hunyo-capture",
]
test = ["install-packages", "pytest {args:test}"]
test-capture = ["install-packages", "python -m pytest packages/hunyo-capture/tests/ {args}"]
test-mcp = ["install-packages", "python -m pytest packages/hunyo-mcp-server/tests/ {args}"]
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=packages/hunyo-mcp-server/src/hunyo_mcp_server --cov=packages/hunyo-capture/src/hunyo_capture {args:test}"
typing = "mypy --install-types --non-interactive {args:packages/hunyo-mcp-server/src packages/hunyo-capture/src}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
# MCP Inspector commands for testing the server
inspect = "npx @modelcontextprotocol/inspector hunyo-mcp-server --notebook test/fixtures/test_notebook.py {args:}"
inspect-cli = "npx @modelcontextprotocol/inspector --cli hunyo-mcp-server --notebook test/fixtures/test_notebook.py {args:}"
inspect-ui = "npx @modelcontextprotocol/inspector hunyo-mcp-server --notebook test/fixtures/test_notebook.py"
inspect-verbose = "npx @modelcontextprotocol/inspector hunyo-mcp-server --notebook test/fixtures/test_notebook.py --verbose {args:}"
# Multi-version testing scripts
# Multi-Python testing now handled by GitHub Actions CI
# Run tests locally with: hatch run test
# See .github/workflows/test.yml for comprehensive CI matrix
coverage-report = [
    "pytest --cov=packages/hunyo-mcp-server/src/hunyo_mcp_server --cov=packages/hunyo-capture/src/hunyo_capture --cov-report=term-missing --cov-report=html --cov-report=xml {args:test}",
]
coverage-local = [
    "test-cov",
    "python -c 'print(\"\\nðŸ“Š Coverage reports generated in htmlcov/ directory\")'",
    "python -c 'print(\"ðŸ“„ Open htmlcov/index.html in your browser to view detailed coverage\")'",
]

[tool.hatch.envs.test.scripts]
install-packages = [
    "pip install -e ./packages/hunyo-mcp-server",
    "pip install -e ./packages/hunyo-capture",
]
test = ["install-packages", "pytest {args}"]
test-capture = ["install-packages", "python -m pytest packages/hunyo-capture/tests/ {args}"]
test-mcp = ["install-packages", "python -m pytest packages/hunyo-mcp-server/tests/ {args}"]
test-cov = ["install-packages", "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=hunyo_mcp_server --cov=hunyo_capture {args}"]

# Multi-version testing is handled by GitHub Actions CI/CD matrix
# No need for Hatch matrix since each CI job targets a specific Python version
# This eliminates redundant environment creation and speeds up CI

# Pytest configuration following marimo patterns
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra", "-q", "-v", 
    "--strict-markers", "--strict-config",
    "--ignore-glob=**/fixtures/test_*.py",  # Exclude fixture files from collection
    "--import-mode=importlib"  # Modern import mode for better compatibility
]
testpaths = ["tests"]
asyncio_mode = "auto"  # Enabled - pytest-asyncio>=0.21.0 now available
timeout = 30  # seconds, per test
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "playwright: marks tests that require Playwright browsers",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests requiring event loop",
]

[tool.coverage.run]
source_pkgs = ["hunyo_mcp_server", "hunyo_capture"]
branch = true
parallel = true
omit = [
    "src/hunyo_mcp_server/__about__.py",
]

[tool.coverage.paths]
hunyo_mcp_server = [
    "packages/hunyo-mcp-server/src/hunyo_mcp_server", 
    "*/hunyo-mcp-server/src/hunyo_mcp_server",
    "*/hunyo-notebook-memories-mcp/packages/hunyo-mcp-server/src/hunyo_mcp_server",
    "/home/runner/work/hunyo-notebook-memories-mcp/hunyo-notebook-memories-mcp/packages/hunyo-mcp-server/src/hunyo_mcp_server",
    "/Users/*/hunyo-notebook-memories-mcp/packages/hunyo-mcp-server/src/hunyo_mcp_server"
]
hunyo_capture = [
    "packages/hunyo-capture/src/hunyo_capture", 
    "*/hunyo-capture/src/hunyo_capture",
    "*/hunyo-notebook-memories-mcp/packages/hunyo-capture/src/hunyo_capture", 
    "/home/runner/work/hunyo-notebook-memories-mcp/hunyo-notebook-memories-mcp/packages/hunyo-capture/src/hunyo_capture",
    "/Users/*/hunyo-notebook-memories-mcp/packages/hunyo-capture/src/hunyo_capture"
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
target-version = ["py310", "py311", "py312", "py313"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 88

lint.select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # TODO: SECURITY - Review before production! SQL injection warnings ignored for dev
    "S608",
    # Ignore complexity warnings (sometimes necessary for business logic)
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR0917", "PLR0914", "PLR1702", "PLR0904",
    # Allow imports not at top-level (useful for conditional imports, lazy loading)
    "E402", "PLC0415",
    # Allow longer lines (useful for logs and test asserts)
    "E501",
    # Allow relative imports
    "TID252",
    # Ignore pytest method style warnings (test methods don't need to be static)
    "PLR6301",
    # Allow subprocess usage in tests
    "S404",
    # Allow private imports for testing/development
    "PLC2701",
    # Allow explicit string comparisons (more readable than implicit)
    "PLC1901",
    # Allow eval() usage in debugging/hooking contexts
    "S307",
]

lint.unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["hunyo_mcp_server", "capture"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
# Prevent imports starting with "src." to enforce proper package imports
banned-module-level-imports = [
    "src",          # Ban any import starting with "src."
    "src.*",        # Ban all submodules of src package  
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, relative imports, unused fixtures, subprocess calls, print statements, and marimo function naming
# ALSO allow Unicode in tests since they may contain test data with Unicode
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG002", "S603", "S607", "T201", "N807", "RUF001", "RUF002", "RUF003"]
# Package-specific test directories
"packages/*/tests/**/*" = ["PLR2004", "S101", "TID252", "ARG002", "S603", "S607", "T201", "N807", "RUF001", "RUF002", "RUF003"]
# Marimo notebooks in test fixtures can use print statements and marimo function naming  
"tests/fixtures/*.py" = ["T201", "N807"]
# Allow Unicode in documentation files
"**/{README,CHANGELOG,CONTRIBUTING,ROADMAP}.md" = ["RUF001", "RUF002", "RUF003"]
# CI files can have Unicode (we manually fixed them to be Windows-safe)
".github/**/*.yml" = ["RUF001", "RUF002", "RUF003"]

[tool.mypy]
# Relaxed configuration for development - focus on real type errors
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

# Ignore import issues for now - the code has fallbacks
ignore_missing_imports = true

# Be very permissive for development
strict = false
disallow_untyped_defs = false
disallow_any_generics = false
disallow_untyped_calls = false
check_untyped_defs = false
warn_unused_ignores = false
warn_redundant_casts = false

# Exclude test files 
exclude = [
    "tests/.*",
    ".*_test\\.py$",
]

# Disable specific error codes that are blocking
disable_error_code = [
    "import-not-found",  # Main blocker - ignore missing import issues
    "no-untyped-def",    # Allow untyped functions for now
    "no-untyped-call",   # Allow calls to untyped functions
    "union-attr",        # Allow attribute access on unions
    "assignment",        # Allow type assignment mismatches for now  
    "return-value",      # Allow return type mismatches for now
    "arg-type",          # Allow argument type mismatches for now
    "var-annotated",     # Allow missing variable annotations
    "index",             # Allow indexing issues for now
    "attr-defined",      # Allow attribute definition issues for now
    "method-assign",     # Allow method assignment (used in hooking)
    "unreachable",       # Allow unreachable code warnings for now
    "type-var",          # Allow type variable issues
    "dict-item",         # Allow dict item type mismatches  
    "call-arg",          # Allow call argument issues
    "list-item",         # Allow list item type mismatches
]

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "psutil.*", 
    "marimo.*",
    "duckdb.*",
    "jsonschema.*",
    "watchdog.*",
    "websockets.*",
    "openlineage.*",
    "click.*",
    "weakref.*",
]

# Completely ignore problematic modules for now
# (No modules currently ignored)